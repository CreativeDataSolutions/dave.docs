[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "dave.docs",
    "section": "",
    "text": "Contact: dmitry@creative-data.solutions"
  },
  {
    "objectID": "partial/getting_started.html",
    "href": "partial/getting_started.html",
    "title": "Introduction",
    "section": "",
    "text": "DAVe: Data Analysis and Visualization engine\n\n\n\n\n\nDAVe, application interactively combines statistics, clustering, data exploration and visualization with machine learning, functional and network analysis to create information and context rich mapped networks. The following manual describes a selection of available workflows. Get ready to connect your data with context!\n\n\n\n\nModules\n\nDAVe is comprised of 10 modules covering: data, plotting, pre-processing, statistics, clustering, dimensional reduction, pathway analysis, predictive modeling, network analysis and reporting domains. Each module contains a calculate, explore, plot and report components.\n\n\n\nActions\n\nCalculate\n\n\nThis tab is used to set the method options and view the results summary and tabular output.\n\n\n\n\nExplore\n\n\nInteractively explore the results.\n\n\n\n\nPlot\n\n\nView and tune your data visualizations.\n\n\n\n\nReport\n\n\nCreate data analysis summaries and reproducible reports."
  },
  {
    "objectID": "partial/quickstart.html#a-select",
    "href": "partial/quickstart.html#a-select",
    "title": "Overview",
    "section": "A Select",
    "text": "A Select\n\nThe navigation bar is used to select different analyses. Each analysis may also have sub-options. Typical workflows will include choosing modules from the nav bar progressing from left to right e.g. loading the data in Data and then formatting the data for analysis in the Preprocess module."
  },
  {
    "objectID": "partial/quickstart.html#b-controls",
    "href": "partial/quickstart.html#b-controls",
    "title": "Overview",
    "section": "B Controls",
    "text": "B Controls\n\nThe sidebar is used to select analyses methods, tune visualizations and specify report options."
  },
  {
    "objectID": "partial/quickstart.html#c-workflow",
    "href": "partial/quickstart.html#c-workflow",
    "title": "Overview",
    "section": "C Workflow",
    "text": "C Workflow\n\n\nThe tabpanel can be used to progress through calculate, explore, plot and report analysis steps. The calculate tab is used to select method options and generate analysis results. The explore tab is used to create interactive plots to explore and summarize objects created in the calculate tab. The plot tab is used to fine-tune visualizations for the report. The report tab is used to collect all methods, results and plot settings and generate a report summarizing all of data analysis methods and results. Each module’s reports can be later combined and edited in the Report module.\n\n\nSee more workflow examples."
  },
  {
    "objectID": "partial/quickstart.html#d-results",
    "href": "partial/quickstart.html#d-results",
    "title": "Overview",
    "section": "D Results",
    "text": "D Results\n\nThis is the main panel where calculation, exploration, plotting and report results will be output to. Results may include both static and interactive results which can be manipulated further."
  },
  {
    "objectID": "partial/quickstart.html#e-help",
    "href": "partial/quickstart.html#e-help",
    "title": "Overview",
    "section": "E Help",
    "text": "E Help\n\nSelect this icon to to view instructions for each selected module and analysis workflow step."
  },
  {
    "objectID": "partial/workflows.html",
    "href": "partial/workflows.html",
    "title": "Workflows",
    "section": "",
    "text": "Data anlysis workflows are encapsulated in domain specific modules. The module results can be linked, visualized and combined into interactive reports.\n\n\nLinking modules\n\nInduvidual module results can be combined. For example, here is an example data worflow showing how to load, preprocess and review the results for your data.\n\n\n\n\n%%{init: {'theme': 'dark' }%%\ngraph LR\n\n    1((1)) --> data[\"fa:fa-database Data #9679;\"];\n    data --> 2;\n    2((2)) --> preproc[\"fa:fa-scissors Preprocess #9679;\"];\n    3((3)) --> plot[\"fa:fa-braille Plot #9679;\"];\n    4((4)) --> report[\"fa:fa-file-text-o Report #9679;\"];\n    preproc --> 3;\n    preproc --> 4;\n\n    classDef green fill:#33a378, color:#fff, stroke:#33a378;\n    classDef blue fill:#4472c4, color:#fff, stroke:#4472c4;\n    class 1 blue;\n    class 2 blue;\n    class 3 blue;\n    class 4 blue;\n    class data green;\n    class preproc green;\n    class plot green;\n    class report green;\n\n\n\n\n\n\n\n\n\n\n\nThe Preprocess module is used to separate the numeric data from its sample (row) and variable (column) meta data. This creates a _data, _row_meta and _col_meta objects for each original data set. An example of these objects relate to one another is shown below.\n\n\n\nThe Preprocess module can also be used to overview and impute missing values.\n\n\n\nModule workflows\n\nEach module uses the same basic workflow. For example, to prepare the data for analyis you can use the preprocess module with the following workflow.\n\n\n\n\n%%{init: {'theme': 'dark'} }%%\ngraph LR\n    1((1)) --> preproc[\"fa:fa-scissors Preprocess #9679;\"];\n    2((2)) --> calculate(\"fa:fa-sliders Calculate #9679;\");\n    3((3)) --> explore(\"fa:fa-pencil-square-o Explore #9679;\");\n    4((4))  --> plot(\"fa:fa-bar-chart Plot #9679;\")\n    5((5)) --> report(\"fa:fa-file-text-o Report #9679;\");\n    6((6)) --> save(\"fa:fa-file Save #9679;\");\n    preproc --> 4;\n    preproc -->5;\n    preproc --> 2;\n    preproc --> 3;\n    calculate --> 6;\n\n    classDef green fill:#33a378, color:#fff, stroke:#33a378;\n    classDef blue fill:#4472c4, color:#fff, stroke:#4472c4;\n    classDef gray fill:#808080, color:#fff, stroke:#4472c4;\n    class 1 blue;\n    class 2 blue;\n    class 3 blue;\n    class 4 blue;\n    class 5 blue;\n    class 6 blue;\n    class preproc green;\n    class plot gray;\n    class report gray;\n    class explore gray;\n    class calculate gray;\n    class save gray;\n\n\n\n\n\n\n\n\n\n\n\nData analysis options and results can be configured and sumarized in calculate. The results can be visualized using static plot or interactive explore tabs. The methods, results and created visualizations can be summarized in the report. This can be done iteratively to explore and refine the analysis results and summaries. Once the results are finalized the data object can be saved using the controls at the bottom of the calculate menu.\n\n\n\nFull workflow\n\nBelow is an example of how to progress an analysis from data loading, formatting and all the way to creating rich mapped networks.\n\n\n\n\n%%{init: {'theme': 'dark'}}%%\ngraph LR\n\n    1((1)) --> data[\"fa:fa-database Data #9679;\"];\n    2((2)) --> preproc[\"fa:fa-scissors Preprocess #9679;\"];\n    3((3)) --> stats[\"fa:fa-superscript Statistics #9679;\"];\n    4((4)) --> path[\"fa:fa-flask Pathway #9679;\"];\n    5((5)) --> clust[\"fa:fa-snowflake-o Cluster #9679;\"];\n    6((6)) --> multi[\"fa:fa-codepen Multivariate #9679;\"];\n    7((7)) --> ml[\"fa:fa-university Model #9679;\"];\n    8((8)) --> net[\"fa:fa-share-alt Network #9679;\"];\n    9((9)) --> report[\"fa:fa-file-text-o Report #9679;\"];\n    vis[\"fa:fa-braille Plot.\"];\n    data --> 2;\n    preproc --> 3;\n    preproc --> 5;\n    preproc --> 6; \n    preproc --> 7;\n    stats --> 4;\n    preproc --> 8;\n    stats --> vis;\n    multi --> vis;\n    clust --> vis;\n    ml --> vis;\n    \n\n    classDef green fill:#33a378, color:#fff, stroke:#33a378;\n    classDef blue fill:#4472c4, color:#fff, stroke:#4472c4;\n    class 1 blue;\n    class 2 blue;\n    class 3 blue;\n    class 4 blue;\n    class 5 blue;\n    class 6 blue;\n    class 7 blue;\n    class 8 blue;\n    class 9 blue;\n    class data green;\n    class preproc green;\n    class stats green;\n    class clust green;\n    class multi green;\n    class ml green;\n    class path green;\n    class report green;\n    class net green;\n    class vis green\n\n\n\n\n\n\n\n\n\n\n\n\nAvailable analyses\n\nData\n\nupload data from files or load saved projects\noverview and summarize data components\nmanage saved data\ndownload\n\nPlot\n\ninteractively filter data to plot\ncreate dynamic visualizations\n\nline plots\nscatter plots\nbox plots\n\nmap data to plot options\n\nsize/width\ncolor\nshape\nrow and/or column sub plots\n\nmodify plotting themes, text and legend\n\nPreprocess\n\nmerge numeric data with sample and variable meta data\noverview and impute missing values\n\nStatistics\n\nidentify significant differences between two groups\ngroup summary statistics\nvolcano plots\nviolin and box plots\n\nCluster\n\nhierarchical clustering\n\ncombined samples and variables\nsamples\nvariables\ncorrelations between samples or variables\n\nheatmaps\ndendrograms\n\nMultivariate\n\nPrincipal Components Analysis (PCA)\nVisualize results\n\nscree plots\nscores plot\nloadings plot\nbiplot\noutlier plot\n\n\nPathway\n\nbiochemical pathway enrichment analysis\nbiochemical pathway and fold change visualization\n\nModel\n\nmachine learning model training and validation\n\nclassification\nregression\n\nfeature selection\nmodel ensemble\n\nNetwork\n\nCalculate relationships\n\nbiochemical product to precursor\nmolecular structural similarity\nempirical regularized correlations\n\ninteractive network visualizations\nmap analysis results to network properties\ncombine and modify network relationships and properties"
  },
  {
    "objectID": "partial/data.html",
    "href": "partial/data.html",
    "title": "1  Data",
    "section": "",
    "text": "The Data module can be used to:\n\nupload data from files or load saved projects\noverview and summarize data components\nmanage saved data\ndownload\n\n\n\n\nThe Data module is used to load, overview and manage data sets used by all other modules. The following is an example of how to format data for analysis in DAVe. To load the tutorial data select the Data module >> then Load on the sidebar >> Data type: examples >> load.\n\n\n\nLoading the example data will add the dave_ and dave_var_meta data sets which are examples of how to format the numeric data, sample (row) meta data and variable (column) meta data. Notice that dave_ contains both information about the samples (columns A to C) which describes each of the measurements. For example, the first row contains information about the sample label: sample1, its class: non-diabetic and age: old. The measured values for sample1 start in column D (e.g. var1, var2, etc). The measured variables can correspond to any numeric data to be used for the analysis while the sample meta data contained in the first three columns can be used to construct statistical and machine learning models and annotate visualizations.\n\n\n\nTo merge the sample meta data and numeric data we need to specify the index shared by the dave_ and dave_var_meta data components. The index corresponding the mapping between the two data sets is defined in the ID column in dave_var_meta. Note: while this column can have any name, it needs to contain the exact column name(s) specified for the numeric data in dave_. For example, the first row in dave_var_meta describes the numeric variable named var1 in the dave_ data. Important: it is recommended to use strings with no spaces and special characters (e.g. var1 or measurement_1) instead of numeric values to name the numeric data and the index.\n\n\nNext use the Preprocess module to merge the two data set.\n\n\nFormatting\n\nThe data should be formatted into two parts 1) the main data containing sample descriptions and numeric variable data and 2) variable meta data decribing the measurements.\n\n\n\n\n\nSelect and view the data as a summary or table.\n\n\n\n\n\n\n\n\nData can be uploaded in the following formats: .csv, project or example.\n\n\n\n\n\n\n\n\nSelected data summary.\n\n\n\n\n\n\n\n\nSelected data table overview.\n\n\n\n\n\n\n\n\nData can be saved as a .csv for download or a project which can be loaded later.\n\n\n\n\n\n\n\n\nDelete data objects."
  },
  {
    "objectID": "partial/preprocess.html",
    "href": "partial/preprocess.html",
    "title": "2  Preprocess",
    "section": "",
    "text": "The preprocess module is used to merge, filter and prepare the data for analysis.\n\n\nMerge\n\nThis analysis is used to identify experimental design factors and merge numeric and variable metadata. The induvidual data components to merge should be related as shown below. See the preprocess for more details.\n\n\n\nCalculate\n\n\n\nSelect sample meta data (e.g. non-numeric descriptors of the experimental design) which will be added to the _row_meta object and made available to use in visual mapping and analysis/calculation controls.\n\n\n\n\n\n\n\n\nIdentify and add column or measurement meta data, wherein ID sets the unique row identifier (e.g. row number).\n\n\n\n\n\n\n\n\nView merge summary.\n\n\n\n\n\n\n\nExplore and Plot\n\n\n\nVisualize a summary of the merged data.\n\n\n\n\n\n\n\n\nSave the merged data for further analyses.\n\n\n\n\n\n\n\n\nMissing\n\nThis analysis can be used to identify and remove variables with missing values. Specify a factor group of interest and the missing cutoff or percent acceptible missing for each level in the group. It is also useful to remove non-informative varibles or those with a standard deviation of zero using the remove zero variance option.\n\n\nCalculate\n\n\n\nRemove error prone variables with too many missing values or zero variance. Optionally select groups of samples to evaluate missing values.\n\n\n\n\n\n\n\n\nImpute all missing values in the data. Replace based on a variety of summaries based on the present values.\n\n\n\n\n\n\n\nExplore and Plot\n\n\n\nView missing data for each sample and variable, overall and by class. Missing or zero variables shown in red are arranged based on their sample (row) and variable (column) number.\n\n\n\n\n\n\n\n\nFlagged variables, or those containing greater or equal percent zero or missing values than the missing cutoff are shown in red for each level of a group `group``.\n\n\n\n\n\n\n\n\nSave the filtered data for further analyses."
  },
  {
    "objectID": "partial/stats.html",
    "href": "partial/stats.html",
    "title": "3  Statistics",
    "section": "",
    "text": "The statistics module is used to carry out statistical analyses, identify and filter the data based on significant differences between groups.\n\n\ntwo-class\n\nThis data analysis implements a non-parametric test for differences in means between two groups. This test does not assume normality and can be robust to outliers when testing for differences in means between two groups with small samples sizes. This module can also be used to identify differentially expressed variables between groups and create filtered datasets based on the test p-values Hollander and Wolfe (1973).\n\n\nCalculate\n\n\n\nIdentify experimental design factor(s) to use for tests and specify variable meta data.\n\n\n\n\n\n\n\n\nSelect significance level (alpha) to use in visualizations and filter the data.\n\n\n\n\n\n\n\n\nView statistical test results.\n\n\n\n\n\n\n\nExplore and plot\n\n\n\nCreate a volcano plot to visualize the relationship between variable fold-changes between groups and test p-values.\n\n\n\n\n\n\n\n\nIdentify variables with large fold-changes between groups and low p-values.\n\n\n\n\n\n\n\n\nSelect one or many variables to generate violin density plots.\n\n\n\n\n\n\n\n\nExplore variable distributions among groups.\n\n\n\n\n\n\n\n\nUse plot to view many variables and overview the plot style for the report.\n\n\n\n\n\n\n\n\nSave results and optionally remove non-significant variables by selecting keep selected.\n\n\n\n\n\n\n\n\n\nHollander, Myles, and Douglas A. Wolfe. 1973. “Nonparametric Statistical Methods.” New York: John Wiley and Sons, 115–20."
  },
  {
    "objectID": "partial/cluster.html",
    "href": "partial/cluster.html",
    "title": "4  Clustering",
    "section": "",
    "text": "This module is used to identified clusters of related groups of samples and variables.\n\n\nHierarchical\n\nThis module is used to carry out hierarchical cluster analysis (HCA) on samples and variables. HCA distance and agglomeration methods can be used to organize the input based on similarity and identify clusters of closely related samples or variables based on the raw data or correlations.\n\n\nCalculate\n\n\n\nUse the nodes menue to specify if samples or variables will be clustered. You can additionally specify row and column group(s) and labels to enrich the plot and explore visualizations.\n\n\n\n\n\n\n\n\nThe methods menue is used to specify a correlation method, set HCA distance and linkage methods and select the number of clusters.\n\n\n\n\n\n\n\n\nView clustering results and sample and/or variable cluster groupings.\n\n\n\n\n\n\n\nExplore and plot\n\n\n\nView cluster results as a heatmap.\n\n\n\n\n\n\n\n\nView cluster results as a sample dendrogram.\n\n\n\n\n\n\n\n\nView cluster results as a variable dendrogram."
  },
  {
    "objectID": "partial/multivariate.html",
    "href": "partial/multivariate.html",
    "title": "5  Multivariate",
    "section": "",
    "text": "The multivariate module supports dimensional reduction and projection pursuits.\n\n\nPCA\n\nPrincipal components analysis (PCA) can be used to summarise the major modes of variance in the data by fewer and uncorrelated principal components (PCs). It is helpful to analyze how sample and variable meta data is related to PCA sample scores and variable loadings.\n\n\nCalculate\n\n\n\nSpecify the PCA method and normalize the data through centering and scaling.\n\n\n\n\n\n\n\n\nOverview methodsand the variance explained by the PCA model.\n\n\n\n\n\n\n\nExplore and Plot\n\n\n\nSelect from a variety of plot types.\n\n\n\n\n\n\n\n\nThe screeplot shows the variance explained by each PC. The dashed line marks the 1 % variance limit below which components can be ommited.\n\n\n\n\n\n\n\n\nUse cummulative screeplot to view the total % variance explained. The dashed line shows the boundary where 80% of the original variance in the data has been captured by the PCA model.\n\n\n\n\n\n\n\n\nThe diagnostics plot can be used to identify moderate and extreme sample outliers. Large sample leverage denotes a large influence of the samples variance to the identification of the PC components (outliers). The DmodX or highlights moderate multivariate sample differences. Samples showing both high leverage and DmodX should be investigated further.\n\n\n\n\n\n\n\n\nSample scores display multivariate similarities through proximity to other samples in the PCA space.\n\n\n\n\n\n\n\n\nThe loadings plot displays variable similarities.\n\n\n\n\n\n\n\n\nThe plotting menue for scores and loadings can be used to select PCs to view, map meta data to plot colors and group boundaries showing the Hoettlings T2 ellipse and modify plot asthetics.\n\n\n\n\n\n\n\n\nThe biplot can be used to simultaneously visualize sample scores and loadings over layed on top of each other. Variables with extreme loadings (large positive or negative x/y position) have the largest effects on the sample scores (may correspond to low or high values among samples with similairly extreme scores compared to others)."
  },
  {
    "objectID": "partial/pathway.html",
    "href": "partial/pathway.html",
    "title": "6  Pathway Enrichment",
    "section": "",
    "text": "The pathway module is used to test for significant enrichment in biological pathways and visualize the results.\n\n\nEnrichment\n\nThis analysis implements a hypergeometric test to identify significant enrichment in KEGG biochemical pathways based on statistical test p-values. Enrichment is calculated based on the KEGG database and reference (ko) organism.\n\n\nCalculate\n\n\n\nSelect the name of the column with KEGG id for each variable. Filter which variables will be tested for pathway enrichment based on statistical test p-values and significance cut off.\n\n\n\n\n\n\n\n\nFilter enrichment results based on the p-value cutoff and false dicovery rate (FDR) adjustment.\n\n\n\n\n\n\n\n\nOverview the enrichment test methods and tabular results where: map is the KEGG pathway map id, n_hits is the number of significant variables from this pathway, n_cpd the number of compounds in the pathway and prct is the percent of enriched variables compared to total pathway variables. Selection of interesting pathways to investigate further could involve: 1) verifying that the pathway has a moderate minimum number of variables (e.g. > 10) 2) identifying low p-value and high prct enriched pathways 3) visualizing the network topology of enriched variables in the pathway (e.g. look for metabolic proximity of cha ges which may signify a functional module) . NOTE: Some very large and generic pathways such as Metabolic pathways can take a few minutes to render.\n\n\n\n\n\n\n\nPlot\n\n\n\nSelect pathway name and identify the column to use as the fold-change to view variable changes mapped to the pathway.\n\n\n\n\n\n\n\n\nThe fold-changes normalized to between -1 and 1 are mapped onto pathway entities as described in the color bar in the top right corner.\n\n\n\n\n\n\n\nReport\n\n\n\nSelect the number of top pathways (based on p-value) to show in table outputs and which pathways to show visualizations of."
  },
  {
    "objectID": "partial/model.html",
    "href": "partial/model.html",
    "title": "7  Predictive modeling",
    "section": "",
    "text": "Model\n\nCreate and optimize machine learning models for classification and regression tasks.\n\n\nCalculate\n\n\n\nSelecting the type of model you would like to create classification or regression will toggle the available variables to predict. Use the filter menu selected to specify which variables should be included in the model based on criteria generated in other modules (e.g. statistical and feature selection).\n\n\n\n\n\n\n\n\nThe model menu is used to specify a single or multiple models to fit to the data. The model hyperparameters can be automatically tuned based on grid size which defines the number or random setting to test. Specific model hyperparameters can be specified using the manual setting. Note when fitting multiple models tuning will be done in the auto mode. The optimize for is used to specify if you want to select the best model based on performance on the training (recommended) or held out test data.\n\n\n\n\n\n\n\n\nThis menu is used to specify the training and test data and model cross-validation parameters. Similar to the model>>tune the cross-validation parameters can be manually or automatically set. For example, the selections shown in the example will randomly select 70% of the data (samples) to fit the model which will then be validated on the 305 held out or test data. The model will be internally cross-validated by splitting the training data into 7 folds and then leaving out each fold during the model fit and then testing the performance on the held-out fold. This process will be repeated 3 times and the performance on the training data will be summarized over all the results.\n\n\n\n\n\n\n\n\nModel methods amd performance summary. For eaxample, this show three models were fitted, RandomForest (rf), Partial Least Squares projections to latent structures (pls) and radial kernel Support Vectoem Machine (svmRadial). The top performing model (rf) is highlighted in green.\n\n\n\n\n\n\n\nPlot and Explore\n\n\n\nModel performance for the training and test data and training time can be compared. The y-axis shows the selected model performance metric and x-axis the training time.\n\n\n\n\n\n\n\n\nThis plot is used to visualize the impact of hyperparameters on model performance.\n\n\n\n\n\n\n\n\nIdentify the proportion of miss classified samples for classification models using a confusion matrix. Optionally show actual counts or percent for correct and incorrect classifications.\n\n\n\n\n\n\n\n\nVisualize variable’s importance or contribution to the model’s performance. Importance for multiple models is calculated based weighted metric of the model’s performance and each variables importance in the model. Importance based on multiple models displays the variables consensus rank (y-axis) across all models and the actual importance in the single highest performing model (x-axis).\n\n\n\n\n\n\n\n\nFeature selection\n\nFeature selection is used to identify variables which maximize model performance. Optimal variables are identified using recursive feature elimination wherein many models are built from subsets of variables and an optimal model is identified based on which subset yielded the highest performing model.\n\n\nCalculate\n\n\n\nThe data menu is used to specify the model type and select target and predictor variables.\n\n\n\n\n\n\n\n\nThe optimize menu is used to specify the algorithm used for the selection. The metric specifies which performance criteria will be used to identify the optimal subset of variables.\n\n\n\n\n\n\n\n\nThe validate menu is used to specify the model cross-validation parameters and size of the automatic hyperparameter tuning grid.\n\n\n\n\n\n\n\n\nView feature selection methods and results.\n\n\n\n\n\n\n\nPlot and Explore\n\n\n\nThis visualization displays model performance (y-axis) based on the subset of variables (x-axis). The optimal model is highlighted in red. The plot controls can be used to specify which model metric will be used for the visualization (use calculate to optimized subsets for that metric). The optimal variables can be selected based on the subset function. Options include PickSizeBest which specifies the subset which maximized or minimized the chosen performance metric or PickSizeTolerance which allows for models with less parameters (variables), which are also worse than the optimal model. The accepted decrease in performance is specified as a percent of the metric in tolerance.\n\n\n\n\n\n\n\n\nThis visualizations shows the selected variables (red) importance compared to those which were removed (blue).\n\n\n\n\n\n\n\n\nAdd selected features filter to the row_metadata or remove all non-selected variables from the data set keep selected. Common workflows might include feature selection followed by training wherein the rfe_selected filter can be used to select variables in the model >> data >> filter >> selected menu."
  },
  {
    "objectID": "partial/network.html",
    "href": "partial/network.html",
    "title": "8  Network Analysis",
    "section": "",
    "text": "Calculate emprical regularized correlation, biochemical relationships and structural similarity networks. Each module supports rich static, interactive and dynamic network visualizations.\n\n\nTranslate\n\nTranslate between > 200 bichemical identifiers.\n\n\nCalculate\n\n\n\nSelect translation options. The identifier selects the column in the col_meta to translate. Use from and to to specify the identify of the selected identifier and what new identifier it should be translated to.\n\n\n\n\n\n\n\n\nView translation results.\n\n\n\n\n\n\n\n\nMapping\n\nCombine and create variable mappings to add to network visualization node and edge properties.\n\n\nCalculate\n\n\n\nMap the log base 2 transformed fold-change to its absolute value and sign. This is useful to normalize increases and decreases and encode their magnitude and direction of change using separate asthetics.\n\n\n\n\n\n\n\n\nMap the significance of a p-value to a binary (e.g. true or false) outcome. This is useful to separate asthetics for significant and non-significant fold-changes. The following examples would evaluate if the p-value is less than or equal to 0.05.\n\n\n\n\n\n\n\n\nCombine mapped variables. This is useful to fine-tune asthetics based on custom combinations of mappings.\n\n\n\n\n\n\n\n\nView the results of the mapping process. Note you first need to save the results from fold-change and p-values prior to using them with the combine transformation.\n\n\n\n\n\n\n\n\nCorrelation\n\nThis module is used to create and regularized correlation networks Jiang et al. (2019).\n\n\nCalculate\n\n\n\nSelect correlation type and if p-values should be False discovery rate Benjamini and Hochberg (1995) corrected.\n\n\n\n\n\n\n\n\nSelect regularizationm method based on rotation information criterion (ric), stability approach to regularization selection (stars) or extended Bayesian information criterion (ebic) Jiang et al. (2019). Note you can also manually select the regularization lambda (higher lambda is more strict), but this needs to be done after a model is calculated. If no edges are returned using manual then try a lowe or less stict regularization.\n\n\n\n\n\n\n\n\nView methods and summary for the calculated network.\n\n\n\n\n\n\n\n\nBiochemical\n\nThis module is used to calculate and biochemcial networks. Metabolomic precursor to product relationships are based on KEGG identifiers.\n\n\nCalculate\n\n\n\nSelect KEGG identifier column name in the data.\n\n\n\n\n\n\n\n\nView methods and summary for the calculated network.\n\n\n\n\n\n\n\n\nStructural\n\nThis module is used to calculate and structural simialrity networks. Metabolite structural similarities are calculated based on overlap in Pubchem structural fingerprints defined by compound identifiers or CID\n\n\nCalculate\n\n\n\nSelect Pubchem CID identifier column name in the data.\n\n\n\n\n\n\n\n\nView methods and summary for the calculated network.\n\n\n\n\n\n\n\n\nEnrich\n\nThis module is used to combine and visualize networks.\n\n\nCalculate\n\n\n\nSelect networks to combine and visualize. Use single edges to remove duplicate edges from the combined edge lists.\n\n\n\n\n\n\n\n\nUpdate network node attributes based on another compatible data set.\n\n\n\n\n\n\n\n\nView methods and summary for the calculated network.\n\n\n\n\n\n\n\nVisualize\n\nVisualize the created networks. Note the same visualization options are also available for the correlation, biochemical and structural modules.\n\n\n\n\nVisualize and modify network node attributes.\n\n\n\n\n\n\n\n\nModify and filter edges or relationships. Use this module to filter edges based on structural similarity (e.g. >0.8) or correlation strength.\n\n\n\n\n\n\n\n\nCustomize network global properties.\n\n\n\n\n\n\n\n\nCreate static plots which will be featured in the report.\n\n\n\n\n\n\n\n\nCreate interactive plots which allow pan zoom, on hover annotations and control of which nodes and edges are shown.\n\n\n\n\n\n\n\n\nCreate dynamic plots which highlight node connections, on hover annotations, moving nodes and look up of nodes of interest.\n\n\n\n\n\n\n\n\n\nBenjamini, Y., and Y. Hochberg. 1995. “Controlling the False Discovery Rate - a Practical and Powerful Approach to Multiple Testing.” Journal of the Royal Statistical Society Series B-Methodological 57 (1): 289–300.\n\n\nJiang, Haoming, Xinyu Fei, Han Liu, Kathryn Roeder, John Lafferty, Larry Wasserman, Xingguo Li, and Tuo Zhao. 2019. Huge: High-Dimensional Undirected Graph Estimation. https://CRAN.R-project.org/package=huge."
  },
  {
    "objectID": "partial/dave_network_to_cytoscape.html",
    "href": "partial/dave_network_to_cytoscape.html",
    "title": "Publication quality networks",
    "section": "",
    "text": "Creating networks in Cystoscape\n\n\nThe following example shows how to use Cytoscape (v3.7.2) to create publication ready networks from assets calculated in DAVe. This example will use two components the edge_list and the node_data files.\n\n\nData\n\nedge_list.csv\n\n\n\nnode_data.csv\n\n\n\n\nUpload\n\nEdge list\n\nFirst step is to load the edge_list.\n\n\nIn cytoscape select File >> Import >> network from File Upload and then select the edge_list.csv file.\n\n\n\nSet from and to columns\n\n\n\nfrom set to Source Node\n\n\n\nto set to Target Node\n\n\n\nSelect OK once the source and target columns are identified.\n\n\nOverview network\n\n\n\n\nNode attributes\n\nNext load the node _data. Select File >> Import >> Table from File\n\n\n\nSelect the ID column as the variable Key\n\n\n\n\n\nDefine mappings\n\nThe uploaded node attributes should now be available to edit the network node and edge visual properties.\n\n\n\nSpecify the node and edge visual properties.\n\n\n\nTake a look at the example cytoscape.cys file for how each of the data columns were mapped to the network."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Benjamini, Y., and Y. Hochberg. 1995. “Controlling the False\nDiscovery Rate - a Practical and Powerful Approach to Multiple\nTesting.” Journal of the Royal Statistical Society Series\nB-Methodological 57 (1): 289–300.\n\n\nHollander, Myles, and Douglas A. Wolfe. 1973. “Nonparametric\nStatistical Methods.” New York: John Wiley and Sons,\n115–20."
  },
  {
    "objectID": "partial/quickstart.html#c-workflows",
    "href": "partial/quickstart.html#c-workflows",
    "title": "Overview",
    "section": "C Workflows",
    "text": "C Workflows\n\n\nThe tabpanel can be used to progress through calculate, explore, plot and report analysis steps. The calculate tab is used to select method options and generate analysis results. The explore tab is used to create interactive plots to explore and summarize objects created in the calculate tab. The plot tab is used to fine-tune visualizations for the report. The report tab is used to collect all methods, results and plot settings and generate a report summarizing all of data analysis methods and results. Each module’s reports can be later combined and edited in the Report module.\n\n\nSee more workflow examples."
  },
  {
    "objectID": "partial/courses.html",
    "href": "partial/courses.html",
    "title": "Tutorials",
    "section": "",
    "text": "Check out all courses"
  },
  {
    "objectID": "partial/install.html",
    "href": "partial/install.html",
    "title": "Install",
    "section": "",
    "text": "Use dave.minicran to install all R packages."
  },
  {
    "objectID": "partial/cytoscape_examples.html#type-2-diabetes-metabolomic-network",
    "href": "partial/cytoscape_examples.html#type-2-diabetes-metabolomic-network",
    "title": "9  Publication quality networks",
    "section": "Type 2 Diabetes metabolomic network",
    "text": "Type 2 Diabetes metabolomic network"
  },
  {
    "objectID": "partial/API.html",
    "href": "partial/API.html",
    "title": "API",
    "section": "",
    "text": "Code\nlibrary(dave.ocpu.client)\nsource(system.file('app/src/API.R',package='dave.app'))\n\n\n\n\n\n\n\nCode\nlibrary(dplyr)\napis <- c(\n  'dave.ml' = dave_ml_connection,\n  'ctsgetr' = ctsgetr_connection,\n  'dave.network' = dave_network_connection,\n  'dave.path' = dave_path_connection,\n  'dave.multivariate' = dave_multivariate_connection\n)\n\nlapply(1:length(apis), function(i){\n\n  status<-apis[[i]]$get()$status_code ==200\n\n  data.frame(endpoint=names(apis)[i], status = ifelse(status,'OK','DOWN'))\n\n\n}) %>%\n  do.call('rbind',.)\n\n\n           endpoint status\n1           dave.ml     OK\n2           ctsgetr     OK\n3      dave.network     OK\n4         dave.path     OK\n5 dave.multivariate     OK"
  },
  {
    "objectID": "partial/API.html#debug-api-calls",
    "href": "partial/API.html#debug-api-calls",
    "title": "API",
    "section": "Debug API calls",
    "text": "Debug API calls\n\nlibrary(dave.ocpu.client)\nsource(system.file('app/src/API.R',package='dave.app'))\n\n\nThis section shows examples how to debug and determine what might be going wrong when an API call fails.\n\n\nExecute a remote calculation. Lets do something simple like get the column names of a local data set. This will show how to make a request and get the results. In practice, DAVe API endpoints only require a body argument and you can see all the created asset paths by setting return_value = FALSE.\n\ndata(\"mtcars\")\n\nbody<-list(x=mtcars)\npkg_url <-  'ocpu/library/base/R/colnames' #this will call base::colnames\n\nres0<-ocpu_post(\n  dave_ml_connection,\n  body = body,\n  pkg_url = pkg_url,\n  encode = 'json',\n  return_value = TRUE\n)$results\n\nres0\n\n [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\" \"carb\"\n\n\n\n\nMake a request and view the created assets without retrieving the results.\n\nres1<-ocpu_post(\n  dave_ml_connection,\n  body = body,\n  pkg_url = pkg_url,\n  encode = 'json',\n  return_value = FALSE\n)\n\ncat('Add the \"$paths\" below to the following url to view the results:')\n\nAdd the \"$paths\" below to the following url to view the results:\n\ncat(dave_ml_connection$url)\n\nhttp://ec2-52-22-43-130.compute-1.amazonaws.com/ml/\n\nres1\n\n$meta\n$meta$session\n[1] \"x08086e4e27716e\"\n\n$meta$status\n[1] 201\n\n\n$paths\n[1] \"/ocpu/tmp/x08086e4e27716e/R/.val\"            \"/ocpu/tmp/x08086e4e27716e/R/colnames\"        \"/ocpu/tmp/x08086e4e27716e/R/x\"               \"/ocpu/tmp/x08086e4e27716e/stdout\"           \n[5] \"/ocpu/tmp/x08086e4e27716e/source\"            \"/ocpu/tmp/x08086e4e27716e/console\"           \"/ocpu/tmp/x08086e4e27716e/info\"              \"/ocpu/tmp/x08086e4e27716e/files/DESCRIPTION\"\n\n\n\n\nGet the created object from a previous call\n\nget_ocpu_obj(ocpu_session(res1) ,dave_ml_connection$url)\n\n [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\" \"carb\"\n\n\n\n\nReference the previous request’s results in another calculation.\n\nbody<-list(x=res1, collapse='|')\npkg_url <-  'ocpu/library/base/R/paste' \n\nocpu_post(\n  dave_ml_connection,\n  body = body,\n  pkg_url = pkg_url,\n  encode = 'form',\n  return_value = TRUE\n) $results\n\n[1] \"mpg|cyl|disp|hp|drat|wt|qsec|vs|am|gear|carb\"\n\n\n\n\nYou can include multiple session’s results to execute more complicated calculations. The example below shows how to get the row and column names of the data and then create a sequence based on the total number of rows. The function ocpuclient::get_ocpu_list_item is useful for selecting specific named list elements from previous sessions results.\n\n#get a specific element from a previous session either by list index or name\nbody<-list(obj='<NAME of OBJECT>',\n           name='<NAME of LIST ITEM>')\n\nget_ocpu_list_item(dave_ml_connection ,body)"
  },
  {
    "objectID": "partial/API.html#dave.ml",
    "href": "partial/API.html#dave.ml",
    "title": "API",
    "section": "dave.ml",
    "text": "dave.ml\n\nTrain machine learning models\n\nLoad sample data\n\nlibrary(dave.stat)\n\nWarning: replacing previous import 'dplyr::group_rows' by 'kableExtra::group_rows' when loading 'dave.utils'\n\nlibrary(dave.ml.app)\n\ndata(\"dave_data\")\ntmp<-dave_data\ny<-'class'\n.y<-dave_data_row_meta$class\ntmp[y]<-.y\n\nprint('data \\n')\n\n[1] \"data \\n\"\n\nhead(tmp)\n\n  var1 var2 var3 var4   var5  var6 var7  var8   var9 var10  var11  var12 var13 var14 var15 var16 var17 var18 var19 var20 var21 var22  var23 var24 var25 var26 var27  var28 var29 var30 var31 var32\n1  614 5375   63  885  97956 17344  383  6215 335029  2052 121190 154453   114    74   748   873  2026   974  1512 17687 18934   587  65827   109  3618   231  3728 124610  5858   364    93 68918\n2  858 7345   19 2816 522008 15406 1444 20217 158277  3956  95798  80404  2841  4957  3745  1266  1216   180   319  7329  9648   610   9908   783  9241   228 17265 149821 18248   584   178 82470\n3  785 5186   22  464 128448  9883  431  7131 425732  1862 127310 136283   513   361   212  2950  1495   223   377 21504 25780   730  41018   150 11297   743  4552 208311  5895   209    84 67640\n4 1736 7934   20 2529 102052 51908  273  9672 662227  3407  65341  79363   440  7987   780  2675   382   841  1471  7329  8197  1276  15180   592 29507   138  2761 271428 28004  1649   232 52006\n5  608  621   34 2138 164682  8475  813 16398 403793  3095 152554 118829   233   126   591   742  1496   278   500 12215 26596   741 119988   175  4309   239 11108 136937  5085   583   143 68074\n6  700 7489   13 3490 136560 21300 1358  8961 287435  4937 125301 113334  2564   327   329  3014  2487   782  1655 12977 24556  2388  78044    59  2958  1851  5720  98519  4222   506   169 60156\n  var33 var34 var35 var36 var37 var38 var39 var40 var41 var42 var43 var44 var45 var46 var47 var48 var49 var50 var51 var52 var53  var54 var55 var56 var57 var58 var59 var60 var61 var62 var63 var64\n1 15570   550    52   469   966  4691   866  1302  1365  2565 63983   522 22259   983  2883 36687   328 19928  3424  4792 27216 145349 32229   760 46547  3611  3662   100    31   134   243   290\n2  8033  1758   119   643  1129  7566  4821   651  1197  1052 94707   214 95269  1508  5902 52854   198 12822  5110  6519 30877 145431 28805   326 35386  2147  9729   664    20   181   538   553\n3 26812   513    59   668   900  5962  3057   367   805  1913 52168   329 41972  1049  3204 37694   196 21286  1457  2544 38830 234637 36028   686 75183  2361  2357   574    73   275   200   674\n4 17748  1598   312  1612  1793 24732 20647  1023  2398  1230 13781   235 24896  1771  6500 45556   162 24321  4575  9344 46285 136124 32428  1294 41919  2567  1495   689    48   280   153   539\n5 23613   505   115   182   929  8821  2242   453  1312  2817 76818   681 12041  2741  2904 45492   133 16279  1453  5922 30384 192303 37301   565 61205  3650  2747   480    36   201   319   293\n6 21246  1935   164  1101  1783  7389  2570   304  2551  2658 90494  2717 87973  1479  3510 57609   263  9516  3526   913 19432 203323 30487  1893 76119   985  3216   111    29   322   327   250\n  var65 var66 var67 var68 var69 var70 var71 var72 var73 var74 var75 var76  var77 var78 var79 var80  var81 var82 var83  var84 var85 var86  var87 var88 var89 var90 var91 var92 var93 var94 var95 var96\n1   809  6631   511  3396 24684  1750  3221    79  1091  5203   938  1372  79568  2570  3354   298  81540  5697   974 630681   402  2558  39333  2873   194  3033  6950  5213  6555   723   431  2317\n2   576  4257   653  5448  4293 15342  1241   806  4777 10854  1225  1545  72806  1231  3823  1483 439970  4641  4136 330666   335  1483 154326  1940  1436  1668   360  4454  3447  6635  1139  2165\n3   429  3151   605  3338 20172  4168   962   295   646  4382  1030  1955 118757   750  1793   601  87296 11108  1457 570002   288  2434  56432  1431   450  2263 19782  4149  3491  1429   555  2538\n4   458  6712  1253  6886  3489  4967  1238   295 10820  8455  2170  2338  69891  2357  3538  2265  50985 29204  2464 458242   364  4237  35276  4792   708  2225  1415  3829  1347  1881   900  5826\n5   327   656   758  3540 17772  6289   966   472  1410  8312  1178  1283  98390  2031  3307   797 162270  4759  2132 398966   211  2338  77790  1917   310  1090 10326  3061  2165   621  1301  3017\n6   723 19139   815  1742 28500  7832  1483   804   764  4788  2305  2666  97287   678  1629   405 158230  4079  4218 699264   946  3791  65743  3112  1428  5395 24130 14067  4374  3106  5051  1623\n  var97 var98 var99 var100 var101 var102 var103 var104 var105 var106 var107 var108 var109 var110 var111 var112 var113 var114 var115 var116 var117 var118 var119 var120 var121 var122 var123 var124\n1   454   357   449    250  50233   5473    542   3050 196956   7501   1123   2575    171 226275   7960  34068    173 703043    468     82    117  38621    702    163   2256  12593   3496    237\n2   590  5075   322    868  32708  11907     44   5725 209351   5843   2484   2199    638 134699  16768  15283    410 286200    710     70    149  23280    720   2187   1005   7784   2341    296\n3   647   843   407    549  51183   4602   1056   3869 230738   6840   2024   2859    246 145241  10981  20861    260 570271    247     21     71 190896    396    771    570   9885   2528    172\n4   884   693   249    867  29099  17865     23  21431 170148  10343   1058   4768    205  66569  21393  38956    539 406348   1178    948    393  82660   1126    623   2235  24973   6822    666\n5   819  1128   458    459  33823   5171     32   4373 257287  13112   1816   3519    366 125300  16269   7026   1256 663115    303     85    197  34890    315    610   1946   8900   2315    430\n6   430   522   776   1846  63227   5782   2622   3531 230118  19511   3066   4471    247 171811  24950  26197    386 309276    772     47    224  22115   1022   2129   1740  24712   6441    521\n  var125 var126 var127 var128 var129 var130 var131 var132 var133 var134 var135 var136 var137 var138 var139 var140 var141 var142 var143 var144 var145 var146 var147 var148 var149 var150 var151 var152\n1  65464  11119   3375    166     37    330   4661   1320  14815   2980   5261 191040     36 211268    227   1583   2690   1566    106  11808    891   2171   9061   3817   1285    585   3405   2083\n2  53368   7859   1893    149    249   1000   2505    488   5832    331   5490 104803     51 154355    763   1286   1472   1521     99   8190   1607   5796   9597   1552   1670    728  11467   3388\n3   5632   8014   2528    311    103    541   3763   4663  10242   1655   3440  88014     51 156271   1449   1828   3067    819    110  12032    841   2920   9120   1991   2359    605   2831   4082\n4 204886   7799   4999    374    119    891   3953    948  12625    776   5122 254950    540 111847   2192   2408   5233   1367    124  13023   1629   5445   5724   2560   3151    494   5753   2412\n5  12326  11876   2517    215    164   1764   3694   1941  11191   1495   3121 129198     49 170485    267   1465   2060   1491    559   9986   1787   5882   8686   3186   1784    581   1434   4014\n6  14973   7313   5277    129    266   1039   3969   2492  23606   4093   4162 189868     29 226477    299   1195   1398   1057    263  10895    818   6654  10077   2793   1377   1848   6027   2569\n  var153 var154 var155 var156 var157 var158 var159 var160 var161 var162 var163 var164 var165 var166 var167 var168 var169 var170 var171 var172 var173 var174 var175 var176 var177 var178 var179 var180\n1    224  14978  10211 346973    283     28     61     94  24179    403    101    147    319    863     28    136     82   1995  27912     64    951   2259    142    278    644   1491   1595   7055\n2   1601   2309   5163 324285    444     22     65     88   7408    365    217     97    876    599    190    726    605   5523 402187    158  10615   1311    231    352   3669   4515   1102  15953\n3    138   5658   9558 275459    407   1854   1741     46  36155    352    257    132    404    566     41     69    109   2520  18512    134    753   2153    169    167    554   2834    669   7878\n4   4150  17388  22051 200179    570     50     74    141   3115    681    192    228    430    978    113   2996    321   2752  41822     40   6271   2311    385    205   2336   2127   1321   6161\n5    251   3320   6428 436746    396  19404    323     67  24003    145    127    124    434    689     39    100    137   2173  16933    663   1643   1720    145    266    848    731   1377   8546\n6    209   7992  20504 259153    282     42     90    211  41564    383   8991    142    582    831     57    616    107   2643  24477    458    154   2229    133    231    513   1805    945   9643\n  var181 var182 var183 var184 var185 var186 var187 var188          class\n1    504    833   1750    435    472    534    699  19974 non-diabetic  \n2    555    971    203    206     85    210   3165   2127     diabetic  \n3    501   1010   2157    552     96    125   4264  43528 non-diabetic  \n4   2157   1225    424    652    117    364   2336   7313     diabetic  \n5    351    839   1439    441    327    379   2485  61807 non-diabetic  \n6    697   1776   3759    677    358    455   2244  56396 non-diabetic  \n\nprint('prediction objective \\n')\n\n[1] \"prediction objective \\n\"\n\ntable(tmp[y])\n\nclass\n    diabetic   non-diabetic   \n            23             53 \n\n\n\n\n\nSpecify tuning and performance metrics\n\n.metric<-'Kappa'\n.method<-c('rf')\nclassProbs<-TRUE\ntuneN<-1\ntuneGrid<-NULL\n\n\n\nCreate model train and test data\n\nbody<-list(data=tmp,y=y)\n.data<-ocpu_create_model_data(dave_ml_connection ,body=body)\n\n\n\nDefine model cross validation\n\nbody<-list(method=\"repeatedcv\",num=7,rep=3,classProbs=classProbs)  #this need to be flattened to a string\nfitControl <- ocpu_create_fit_control(dave_ml_connection ,body=body)\n\n\n\nTrain selected model\n\n# create model\nbody <-\n  list(\n    data = .data,\n    y = y,\n    metric = .metric,\n    method = .method,\n    fitControl = fitControl,\n    tuneN = tuneN,\n    tuneGrid = tuneGrid,\n    seed= 1234\n  )\n\nmod<-ocpu_multi_create_predictive_model(dave_ml_connection ,body = body)\n\n\n\nGet model performace summary\n\nbody<-list(multi_mod=mod)\nocpu_get_model_perf(dave_ml_connection ,body=body)\n\n$meta\n$meta$session\n[1] \"x0c312d37700cb3\"\n\n$meta$status\n[1] 201\n\n\n$paths\n[1] \"/ocpu/tmp/x0c312d37700cb3/R/.ocpu_get_model_perf\" \"/ocpu/tmp/x0c312d37700cb3/R/.val\"                 \"/ocpu/tmp/x0c312d37700cb3/stdout\"                \n[4] \"/ocpu/tmp/x0c312d37700cb3/source\"                 \"/ocpu/tmp/x0c312d37700cb3/console\"                \"/ocpu/tmp/x0c312d37700cb3/info\"                  \n[7] \"/ocpu/tmp/x0c312d37700cb3/files/DESCRIPTION\"     \n\n$results\n$results$description\n[1] \"Machine learning based predictive modelling was used to predict class. A single model was fit and optimized based on predictive performance on the test data.A random forest model was developed on  51 samples and 188 predictors to predict  2 classes: diabetic.., non.diabetic.. with no pre-processing. Cross validation was done by resampling: cross-validated (7 fold, repeated 3 times) . Tuning parameter 'mtry' was held constant at a value of 62.\"\n\n$results$table\n  model     train      test metric maximize   time_min\n1    rf 0.6173153 0.7148289  Kappa     TRUE 0.04744553\n\n$results$best\n  model     train      test metric maximize   time_min\n1    rf 0.6173153 0.7148289  Kappa     TRUE 0.04744553\n                                                                                                                                                                                                                                                                                        description\n1 A random forest model was developed on  51 samples and 188 predictors to predict  2 classes: diabetic.., non.diabetic.. with no pre-processing. Cross validation was done by resampling: cross-validated (7 fold, repeated 3 times) . Tuning parameter 'mtry' was held constant at a value of 62.\n\n\n\n\nPlot model results\n\nlibrary(dave.ml.app)\n.mod<-get_ocpu_obj(ocpu_session(mod),dave_ml_connection$url)\ndave.ml.app::plot.model_list(.mod,type='model') # see other types c('performance', 'model','importance','confusion','classification')\n\n\n\n\n\nlibrary(dave.ml.app)\n.mod<-get_ocpu_obj(ocpu_session(mod),dave_ml_connection$url)\ndave.ml.app::plot.model_list(.mod,type='classification',curve='pr') \n\n\n\n\n\nlibrary(dave.ml.app)\n.mod<-get_ocpu_obj(ocpu_session(mod),dave_ml_connection$url)\ndave.ml.app::plot.model_list(.mod,type='confusion',percent=FALSE) # see other types c('performance', 'model','importance','confusion','classification')"
  },
  {
    "objectID": "partial/API.html#feature-selection",
    "href": "partial/API.html#feature-selection",
    "title": "API",
    "section": "Feature selection",
    "text": "Feature selection\n\nUse recursive feature elimination RFE to reduce model features (variables) and increase model performance.\n\n\nSpecify RFE options\n\n\nCode\nfunc<-'rfFuncs' # randomforest\nrepeats<-1 # repeated CV\nnumber<-5 # CV folds\nbody<-list(func=func,repeats=repeats,number=number)\nctrl<-ocpu_create_rfe_control(dave_ml_connection ,body) \n\n\n\n\nSpecify hyperparameters tuning and\n\n\nCode\n# Increase 'tuneLength' to add more tuning hyperparameter tune grid combinations.\ntuneLength<-1\nseed<-123\n\n# Specify training data\nbody<-list(obj=.data,\n           name='train.data')\n\ntrain_data<-get_ocpu_list_item(dave_ml_connection ,body)\n\n#specify variable subsets for RFE\n#NOTE: referencing previous ocpu session objects dynamically in ocpu calls is not easy. If we need to create a subset for RFE we need to calculate this object in another session and reference its results. To do this we also need to calculate the total number of columns in the `train_data`.\n\n#get total number of columns/features in the data\n#encode NULL is used to reference the session. The encoding = 'form' can be used for more complex requirements. \nbody <- list(x = ocpu_session(train_data))\npkg_url <-  'ocpu/library/base/R/dim'\n\ndims<-ocpu_post(\n  dave_ml_connection,\n  body = body,\n  pkg_url = pkg_url,\n  encode = NULL,\n  return_value = TRUE\n)$results\n\n\n#create subset\nbody <- list(from=1,to=dims[2],by=3)\npkg_url <-  'ocpu/library/base/R/seq'\nreturn_value <- FALSE\n\n.subset<-ocpu_post(\n  dave_ml_connection,\n  body = body,\n  pkg_url = pkg_url,\n  encode = 'json',\n  return_value = return_value\n)\n\n#carry out RFE feature selection\nbody <-\n  list(data = train_data,\n        y = y,\n       subset = .subset,\n       ctrl = ctrl,\n       tuneLength = tuneLength,\n       seed = seed)\n\n\nrfe<-ocpu_create_rfe(dave_ml_connection ,body)\n\n\n\n\nSelect best variables\n\n\nCode\n#pick subset\nbest<- 'PickSizeBest' #'pickSizeTolerance' #\"PickSizeBest\"#'pickSizeTolerance'\nmetric<-'Kappa'\nbody<-list(rfRFE=rfe,best=best, metric=metric,tolerance=.1)\n\n# best<- 'pickSizeTolerance'\n# tolerance<-5\n# body<-list(rfRFE=rfe,best=best,tolerance=tolerance)\n\n\n#get top model variables\nselected_rfe<-ocpu_rebuild_rfe(dave_ml_connection ,body)\n.selected_rfe<-get_ocpu_obj(ocpu_session(selected_rfe),dave_ml_connection$url)\n\n\n\n\nModel summary\n\n\nCode\nlibrary(dave.ml.app)\n#collect all required args\nrfe_select_args<-list(\n  best_subset = best,\n  metric = metric,\n  tolerance = NULL,\n  func = func\n)\n\ndo.call('summary.model_rfe',list(c(.selected_rfe,rfe_select_args)))\n\n\n[1] \"Recursive feature elimination (RFE) was used to identify top predictive variables. Backward and forward variable selection was done to optimize model Kappa using rfFuncs, validated with  for  folds repeated  times while conducting  round(s) of model parameter tuning. The final model was selected based on the best subset method. The selected model contains 16 variable(s) and has Kappa equal to 0.701 +/- 0.163. The top 5 variables include: var188, var173, var51, var15 and var34.\"\n\n\n\n\nPlot results\n\nCode\nx<-dave.ml.app::plot.model_rfe(.selected_rfe,metric = metric,print=FALSE) \nggplotly(x)"
  },
  {
    "objectID": "partial/API.html#section",
    "href": "partial/API.html#section",
    "title": "API",
    "section": "",
    "text": "Train machine learning models\n\nLoad sample data\n\nlibrary(dave.stat)\n\nWarning: replacing previous import 'dplyr::group_rows' by 'kableExtra::group_rows' when loading 'dave.utils'\n\nlibrary(dave.ml.app)\n\ndata(\"dave_data\")\ntmp<-dave_data\ny<-'class'\n.y<-dave_data_row_meta$class\ntmp[y]<-.y\n\nprint('data \\n')\n\n[1] \"data \\n\"\n\nhead(tmp)\n\n  var1 var2 var3 var4   var5  var6 var7  var8   var9 var10  var11  var12 var13 var14 var15 var16 var17 var18 var19 var20 var21 var22  var23 var24 var25 var26 var27  var28 var29 var30 var31 var32\n1  614 5375   63  885  97956 17344  383  6215 335029  2052 121190 154453   114    74   748   873  2026   974  1512 17687 18934   587  65827   109  3618   231  3728 124610  5858   364    93 68918\n2  858 7345   19 2816 522008 15406 1444 20217 158277  3956  95798  80404  2841  4957  3745  1266  1216   180   319  7329  9648   610   9908   783  9241   228 17265 149821 18248   584   178 82470\n3  785 5186   22  464 128448  9883  431  7131 425732  1862 127310 136283   513   361   212  2950  1495   223   377 21504 25780   730  41018   150 11297   743  4552 208311  5895   209    84 67640\n4 1736 7934   20 2529 102052 51908  273  9672 662227  3407  65341  79363   440  7987   780  2675   382   841  1471  7329  8197  1276  15180   592 29507   138  2761 271428 28004  1649   232 52006\n5  608  621   34 2138 164682  8475  813 16398 403793  3095 152554 118829   233   126   591   742  1496   278   500 12215 26596   741 119988   175  4309   239 11108 136937  5085   583   143 68074\n6  700 7489   13 3490 136560 21300 1358  8961 287435  4937 125301 113334  2564   327   329  3014  2487   782  1655 12977 24556  2388  78044    59  2958  1851  5720  98519  4222   506   169 60156\n  var33 var34 var35 var36 var37 var38 var39 var40 var41 var42 var43 var44 var45 var46 var47 var48 var49 var50 var51 var52 var53  var54 var55 var56 var57 var58 var59 var60 var61 var62 var63 var64\n1 15570   550    52   469   966  4691   866  1302  1365  2565 63983   522 22259   983  2883 36687   328 19928  3424  4792 27216 145349 32229   760 46547  3611  3662   100    31   134   243   290\n2  8033  1758   119   643  1129  7566  4821   651  1197  1052 94707   214 95269  1508  5902 52854   198 12822  5110  6519 30877 145431 28805   326 35386  2147  9729   664    20   181   538   553\n3 26812   513    59   668   900  5962  3057   367   805  1913 52168   329 41972  1049  3204 37694   196 21286  1457  2544 38830 234637 36028   686 75183  2361  2357   574    73   275   200   674\n4 17748  1598   312  1612  1793 24732 20647  1023  2398  1230 13781   235 24896  1771  6500 45556   162 24321  4575  9344 46285 136124 32428  1294 41919  2567  1495   689    48   280   153   539\n5 23613   505   115   182   929  8821  2242   453  1312  2817 76818   681 12041  2741  2904 45492   133 16279  1453  5922 30384 192303 37301   565 61205  3650  2747   480    36   201   319   293\n6 21246  1935   164  1101  1783  7389  2570   304  2551  2658 90494  2717 87973  1479  3510 57609   263  9516  3526   913 19432 203323 30487  1893 76119   985  3216   111    29   322   327   250\n  var65 var66 var67 var68 var69 var70 var71 var72 var73 var74 var75 var76  var77 var78 var79 var80  var81 var82 var83  var84 var85 var86  var87 var88 var89 var90 var91 var92 var93 var94 var95 var96\n1   809  6631   511  3396 24684  1750  3221    79  1091  5203   938  1372  79568  2570  3354   298  81540  5697   974 630681   402  2558  39333  2873   194  3033  6950  5213  6555   723   431  2317\n2   576  4257   653  5448  4293 15342  1241   806  4777 10854  1225  1545  72806  1231  3823  1483 439970  4641  4136 330666   335  1483 154326  1940  1436  1668   360  4454  3447  6635  1139  2165\n3   429  3151   605  3338 20172  4168   962   295   646  4382  1030  1955 118757   750  1793   601  87296 11108  1457 570002   288  2434  56432  1431   450  2263 19782  4149  3491  1429   555  2538\n4   458  6712  1253  6886  3489  4967  1238   295 10820  8455  2170  2338  69891  2357  3538  2265  50985 29204  2464 458242   364  4237  35276  4792   708  2225  1415  3829  1347  1881   900  5826\n5   327   656   758  3540 17772  6289   966   472  1410  8312  1178  1283  98390  2031  3307   797 162270  4759  2132 398966   211  2338  77790  1917   310  1090 10326  3061  2165   621  1301  3017\n6   723 19139   815  1742 28500  7832  1483   804   764  4788  2305  2666  97287   678  1629   405 158230  4079  4218 699264   946  3791  65743  3112  1428  5395 24130 14067  4374  3106  5051  1623\n  var97 var98 var99 var100 var101 var102 var103 var104 var105 var106 var107 var108 var109 var110 var111 var112 var113 var114 var115 var116 var117 var118 var119 var120 var121 var122 var123 var124\n1   454   357   449    250  50233   5473    542   3050 196956   7501   1123   2575    171 226275   7960  34068    173 703043    468     82    117  38621    702    163   2256  12593   3496    237\n2   590  5075   322    868  32708  11907     44   5725 209351   5843   2484   2199    638 134699  16768  15283    410 286200    710     70    149  23280    720   2187   1005   7784   2341    296\n3   647   843   407    549  51183   4602   1056   3869 230738   6840   2024   2859    246 145241  10981  20861    260 570271    247     21     71 190896    396    771    570   9885   2528    172\n4   884   693   249    867  29099  17865     23  21431 170148  10343   1058   4768    205  66569  21393  38956    539 406348   1178    948    393  82660   1126    623   2235  24973   6822    666\n5   819  1128   458    459  33823   5171     32   4373 257287  13112   1816   3519    366 125300  16269   7026   1256 663115    303     85    197  34890    315    610   1946   8900   2315    430\n6   430   522   776   1846  63227   5782   2622   3531 230118  19511   3066   4471    247 171811  24950  26197    386 309276    772     47    224  22115   1022   2129   1740  24712   6441    521\n  var125 var126 var127 var128 var129 var130 var131 var132 var133 var134 var135 var136 var137 var138 var139 var140 var141 var142 var143 var144 var145 var146 var147 var148 var149 var150 var151 var152\n1  65464  11119   3375    166     37    330   4661   1320  14815   2980   5261 191040     36 211268    227   1583   2690   1566    106  11808    891   2171   9061   3817   1285    585   3405   2083\n2  53368   7859   1893    149    249   1000   2505    488   5832    331   5490 104803     51 154355    763   1286   1472   1521     99   8190   1607   5796   9597   1552   1670    728  11467   3388\n3   5632   8014   2528    311    103    541   3763   4663  10242   1655   3440  88014     51 156271   1449   1828   3067    819    110  12032    841   2920   9120   1991   2359    605   2831   4082\n4 204886   7799   4999    374    119    891   3953    948  12625    776   5122 254950    540 111847   2192   2408   5233   1367    124  13023   1629   5445   5724   2560   3151    494   5753   2412\n5  12326  11876   2517    215    164   1764   3694   1941  11191   1495   3121 129198     49 170485    267   1465   2060   1491    559   9986   1787   5882   8686   3186   1784    581   1434   4014\n6  14973   7313   5277    129    266   1039   3969   2492  23606   4093   4162 189868     29 226477    299   1195   1398   1057    263  10895    818   6654  10077   2793   1377   1848   6027   2569\n  var153 var154 var155 var156 var157 var158 var159 var160 var161 var162 var163 var164 var165 var166 var167 var168 var169 var170 var171 var172 var173 var174 var175 var176 var177 var178 var179 var180\n1    224  14978  10211 346973    283     28     61     94  24179    403    101    147    319    863     28    136     82   1995  27912     64    951   2259    142    278    644   1491   1595   7055\n2   1601   2309   5163 324285    444     22     65     88   7408    365    217     97    876    599    190    726    605   5523 402187    158  10615   1311    231    352   3669   4515   1102  15953\n3    138   5658   9558 275459    407   1854   1741     46  36155    352    257    132    404    566     41     69    109   2520  18512    134    753   2153    169    167    554   2834    669   7878\n4   4150  17388  22051 200179    570     50     74    141   3115    681    192    228    430    978    113   2996    321   2752  41822     40   6271   2311    385    205   2336   2127   1321   6161\n5    251   3320   6428 436746    396  19404    323     67  24003    145    127    124    434    689     39    100    137   2173  16933    663   1643   1720    145    266    848    731   1377   8546\n6    209   7992  20504 259153    282     42     90    211  41564    383   8991    142    582    831     57    616    107   2643  24477    458    154   2229    133    231    513   1805    945   9643\n  var181 var182 var183 var184 var185 var186 var187 var188          class\n1    504    833   1750    435    472    534    699  19974 non-diabetic  \n2    555    971    203    206     85    210   3165   2127     diabetic  \n3    501   1010   2157    552     96    125   4264  43528 non-diabetic  \n4   2157   1225    424    652    117    364   2336   7313     diabetic  \n5    351    839   1439    441    327    379   2485  61807 non-diabetic  \n6    697   1776   3759    677    358    455   2244  56396 non-diabetic  \n\nprint('prediction objective \\n')\n\n[1] \"prediction objective \\n\"\n\ntable(tmp[y])\n\nclass\n    diabetic   non-diabetic   \n            23             53 \n\n\n\n\n\nSpecify tuning and performance metrics\n\n.metric<-'Kappa'\n.method<-c('rf')\nclassProbs<-TRUE\ntuneN<-1\ntuneGrid<-NULL\n\n\n\nCreate model train and test data\n\nbody<-list(data=tmp,y=y)\n.data<-ocpu_create_model_data(dave_ml_connection ,body=body)\n\n\n\nDefine model cross validation\n\nbody<-list(method=\"repeatedcv\",num=7,rep=3,classProbs=classProbs)  #this need to be flattened to a string\nfitControl <- ocpu_create_fit_control(dave_ml_connection ,body=body)\n\n\n\nTrain selected model\n\n# create model\nbody <-\n  list(\n    data = .data,\n    y = y,\n    metric = .metric,\n    method = .method,\n    fitControl = fitControl,\n    tuneN = tuneN,\n    tuneGrid = tuneGrid,\n    seed= 1234\n  )\n\nmod<-ocpu_multi_create_predictive_model(dave_ml_connection ,body = body)\n\n\n\nGet model performace summary\n\nbody<-list(multi_mod=mod)\nocpu_get_model_perf(dave_ml_connection ,body=body)\n\n$meta\n$meta$session\n[1] \"x0d7b07d2eddf41\"\n\n$meta$status\n[1] 201\n\n\n$paths\n[1] \"/ocpu/tmp/x0d7b07d2eddf41/R/.ocpu_get_model_perf\" \"/ocpu/tmp/x0d7b07d2eddf41/R/.val\"                 \"/ocpu/tmp/x0d7b07d2eddf41/stdout\"                \n[4] \"/ocpu/tmp/x0d7b07d2eddf41/source\"                 \"/ocpu/tmp/x0d7b07d2eddf41/console\"                \"/ocpu/tmp/x0d7b07d2eddf41/info\"                  \n[7] \"/ocpu/tmp/x0d7b07d2eddf41/files/DESCRIPTION\"     \n\n$results\n$results$description\n[1] \"Machine learning based predictive modelling was used to predict class. A single model was fit and optimized based on predictive performance on the test data.A random forest model was developed on  51 samples and 188 predictors to predict  2 classes: diabetic.., non.diabetic.. with no pre-processing. Cross validation was done by resampling: cross-validated (7 fold, repeated 3 times) . Tuning parameter 'mtry' was held constant at a value of 62.\"\n\n$results$table\n  model     train      test metric maximize   time_min\n1    rf 0.6173153 0.7148289  Kappa     TRUE 0.04761079\n\n$results$best\n  model     train      test metric maximize   time_min\n1    rf 0.6173153 0.7148289  Kappa     TRUE 0.04761079\n                                                                                                                                                                                                                                                                                        description\n1 A random forest model was developed on  51 samples and 188 predictors to predict  2 classes: diabetic.., non.diabetic.. with no pre-processing. Cross validation was done by resampling: cross-validated (7 fold, repeated 3 times) . Tuning parameter 'mtry' was held constant at a value of 62.\n\n\n\n\nPlot model results\n\nlibrary(dave.ml.app)\n.mod<-get_ocpu_obj(ocpu_session(mod),dave_ml_connection$url)\ndave.ml.app::plot.model_list(.mod,type='model') # see other types c('performance', 'model','importance','confusion','classification')\n\n\n\n\n\nlibrary(dave.ml.app)\n.mod<-get_ocpu_obj(ocpu_session(mod),dave_ml_connection$url)\ndave.ml.app::plot.model_list(.mod,type='classification',curve='pr') \n\n\n\n\n\nlibrary(dave.ml.app)\n.mod<-get_ocpu_obj(ocpu_session(mod),dave_ml_connection$url)\ndave.ml.app::plot.model_list(.mod,type='confusion',percent=FALSE) # see other types c('performance', 'model','importance','confusion','classification')"
  },
  {
    "objectID": "partial/API.html#plot",
    "href": "partial/API.html#plot",
    "title": "API",
    "section": "Plot",
    "text": "Plot\n\nSpecify metadata for all plots\n\n\nCode\ndata(\"dave_data_row_meta\")\ncolor<-dave_data_row_meta %>% select(class)\nlabel<-dave_data_row_meta %>% select(label)\nplot_args<-list(size=5,labels=label,color=color,label=TRUE)\n\n\n\n\nEigenvalues scree scores\n\n\nCode\n# plot_args$type<-'scree'\np<-plot(.pca,plot_args=plot_args,plot_type='scree')\nplotly::ggplotly(p)\n\n\nWarning: `gather_()` was deprecated in tidyr 1.2.0.\nℹ Please use `gather()` instead.\nℹ The deprecated feature was likely used in the plotly package.\n  Please report the issue at <https://github.com/plotly/plotly.R/issues>.\n\n\n\n\n\n\n\n\nEigenvalues cummulative plot\n\n\nCode\nplot_args$type<-'cumm'\np<-plot(.pca,plot_type='cumm',plot_args=plot_args) #type not changing\n# p<-dave.multivariate.app:::dvmPCA_scree_plot(.pca, type='cumm')\nplotly::ggplotly(p)\n\n\n\n\n\n\n\n\nSample scores plot\n\n\nCode\nplot_args$type<-NULL\nplot_args$point.labels<-plot_args$labels\nplot_args$font.size<-3\np<-plot(.pca,plot_type='scores',plot_args=plot_args) #\nplotly::ggplotly(p)\n\n\n\n\n\n\n\n\nSample outlier diagnostics plot\n\n\nCode\nplot_args$type<-NULL\nplot_args$point.labels<-plot_args$labels\nplot_args$font.size<-3\np<-plot(.pca,plot_type='diagnostic',plot_args=plot_args) #\nplotly::ggplotly(p)\n\n\n\n\n\n\n\n\nVariable loadings plot\n\n\nCode\ndata(\"dave_data_col_meta\")\nplot_args$color<-NULL\nplot_args$point.labels<-dave_data_col_meta$name\nplot_args$font.size<-2\np<-plot(.pca,plot_type='loadings',plot_args=plot_args) #\nplotly::ggplotly(p)\n\n\n\n\n\n\n\n\nScores and loadings biplot\n\n\nCode\ndata(\"dave_data_col_meta\")\nplot_args$color<-dave_data_row_meta %>% select(class)\nplot_args$point.labels<-dave_data_col_meta$name\nplot_args$font.size<-2\np<-plot(.pca,plot_type='biplot',plot_args=plot_args) #\nplotly::ggplotly(p)"
  }
]